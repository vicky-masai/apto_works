// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  TaskProvider
  Worker
}

enum OrganizationType {
  Business
  NonProfit
  Individual
}

enum TaskStatus {
  Published
  InReview
  NotPublished
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum TransactionType {
  Add
  Withdraw
}

enum AcceptedTaskStatus {
  Active
  Completed
  Pending
  Review
  Paid
  Cancelled
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String    @unique
  password              String
  userType              UserType
  organizationType      OrganizationType?
  skills                String[]
  balance               Float     @default(0)
  currentAssignedBalance Float    @default(0)
  totalUsedBalance      Float     @default(0)
  totalEarnings         Float     @default(0)
  inProgress            Int       @default(0)
  completedTasks        Int       @default(0)
  isVerified            Boolean   @default(false)
  otp                   String?
  otpExpiry             DateTime?
  tasks                 Task[]
  acceptedTasks         AcceptedTask[]
  balanceHistory        BalanceHistory[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Task {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  taskTitle             String
  taskDescription       String
  category              String
  price                 Float
  estimatedTime         String
  stepByStepInstructions String
  taskStatus            TaskStatus        @default(NotPublished)
  requiredProof         String?
  numWorkersNeeded      Int
  totalAmount           Float
  difficulty            Difficulty        @default(Medium)
  acceptedWorkers       AcceptedTask[]

  taskProviderId        String            @db.ObjectId
  taskProvider          User              @relation(fields: [taskProviderId], references: [id])
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model AcceptedTask {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  workerId          String              @db.ObjectId
  taskId            String              @db.ObjectId
  status            AcceptedTaskStatus  @default(Pending)
  submittedProof    String?
  verifiedByProvider Boolean             @default(false)
  worker            User                @relation(fields: [workerId], references: [id])
  task              Task                @relation(fields: [taskId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model BalanceHistory {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  amount    Float
  type      TransactionType
  user      User            @relation(fields: [userId], references: [id])
  createdAt DateTime        @default(now())
} 