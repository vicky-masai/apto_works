// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  Moderator
  User
  TaskProvider
  Worker
}

enum OrganizationType {
  Business
  NonProfit
  Individual
}

enum TaskStatus {
  Published
  PENDING_REVIEW
  REJECTED
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum TransactionType {
  Add
  Withdraw
}

enum AcceptedTaskStatus {
  Active
  Completed
  Pending
  Review
  Paid
  Cancelled
}

enum AdminTaskStatus {
  Completed
  Pending
  InProgress
}

enum WithdrawalStatus {
  Pending
  Approved
  Rejected
}

enum PaymentMethod {
  BankTransfer
  PayPal
  CreditCard
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String         @unique
  password              String
  userType              UserType       @default(Worker)
  organizationType      OrganizationType?
  skills                String[]
  balance               Float          @default(0)
  currentAssignedBalance Float        @default(0)
  totalUsedBalance      Float          @default(0)
  totalEarnings         Float          @default(0)
  inProgress            Int            @default(0)
  completedTasks        Int            @default(0)
  isEmailVerified       Boolean        @default(false)
  otp                   String?
  otpExpiry             DateTime?
  resetToken            String?
  resetTokenExpiry      DateTime?
  tasks                 Task[]         @relation("TaskProvider")
  acceptedTasks         AcceptedTask[] @relation("Worker")
  balanceHistory        BalanceHistory[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  adminTasks            AdminTask[]
  moneyTransactions     MoneyTransaction[]
  withdrawalRequests    WithdrawalRequest[]
  role                  UserType       @default(User)
  status                String         @default("Active")

  @@index([userType])
}

model Task {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  taskTitle             String
  taskDescription       String
  category              String
  price                 Float
  estimatedTime         String
  stepByStepInstructions String
  requiredProof         String?
  numWorkersNeeded      Int
  totalAmount           Float
  difficulty            String         @default("Medium")
  taskStatus            TaskStatus     @default(NotPublished)
  userId                String         @db.ObjectId
  user                  User           @relation("TaskProvider", fields: [userId], references: [id])
  acceptedUsers         AcceptedTask[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([userId])
  @@index([taskStatus])
  @@index([category])
}

model AcceptedTask {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  taskId                String         @db.ObjectId
  task                  Task           @relation(fields: [taskId], references: [id])
  userId                String         @db.ObjectId
  user                  User           @relation("Worker", fields: [userId], references: [id])
  status                TaskStatus     @default(Active)
  proof                 String?
  describe              String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([taskId])
  @@index([userId])
  @@index([status])
}

model BalanceHistory {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  amount    Float
  type      TransactionType
  user      User            @relation(fields: [userId], references: [id])
  createdAt DateTime        @default(now())

  @@index([userId])
  @@index([type])
}

model AdminTask {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      AdminTaskStatus @default(Pending)
  priority    String          @default("Medium")
  dueDate     DateTime
  assignedTo  String          @db.ObjectId
  user        User            @relation(fields: [assignedTo], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([assignedTo])
  @@index([status])
}

model MoneyTransaction {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  amount      Float
  method      PaymentMethod
  reference   String      @unique
  status      String      @default("Completed")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}


model EarningHistory{
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  amount      Float
  method      PaymentMethod
  reference   String      @unique
  status      String      @default("Completed")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}



model WithdrawalRequest {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  amount          Float
  method          PaymentMethod
  accountDetails  String
  status          WithdrawalStatus @default(Pending)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@index([status])
} 