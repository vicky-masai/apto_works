// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  User
  TaskProvider
}

enum UserStatus {
  Active
  Deleted
}

enum OrganizationType {
  Business
  NonProfit
  Individual
}

enum TaskStatus {
  Published
  Review
  Completed
  Rejected
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum TransactionType {
  Add
  Withdraw
  Earning
}

enum TransactionStatus {
  Pending
  Approved
  Completed
  Rejected
}

enum AcceptedTaskStatus {
  Active
  Completed
  Review
  Paid
  Rejected
  Cancelled
}

enum WithdrawalStatus {
  Pending
  Approved
  Rejected
}

enum PaymentMethod {
  BankTransfer
  PayPal
  CreditCard
}

enum PaymentMethodType {
  BankTransfer
  PayPal
  CreditCard
  UPI
}





model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String         @unique
  password              String
  userType              UserType       @default(User)
  organizationType      OrganizationType?
  skills                String[]
  balance               Float          @default(0)
  totalEarnings         Float          @default(0)
  inProgress            Int            @default(0)
  completedTasks        Int            @default(0)
  isEmailVerified       Boolean        @default(false)
  otp                   String?
  otpExpiry             DateTime?
  tasks                 Task[]         @relation("User")
  acceptedTasks         AcceptedTask[] @relation("Worker")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  transactions          Transaction[]
  role                  UserType       @default(User)
  status                UserStatus     @default(Active)
  paymentMethods        UserPaymentMethod[]
  withdrawals           Withdrawal[]

  @@index([userType])
}

model Task {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  taskTitle             String
  taskDescription       String
  category              String
  price                 Float
  estimatedTime         String
  stepByStepInstructions String
  requiredProof         String?
  numWorkersNeeded      Int
  rejectedReason        String?
  totalAmount           Float
  difficulty            String         @default("Medium")
  taskStatus            TaskStatus     @default(Review)
  userId                String         @db.ObjectId
  user                  User           @relation("User", fields: [userId], references: [id])
  acceptedUsers         AcceptedTask[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([userId])
  @@index([taskStatus])
  @@index([category])
}

model AcceptedTask {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  acceptedId            Int?            @unique
  taskId                String         @db.ObjectId
  task                  Task           @relation(fields: [taskId], references: [id])
  userId                String         @db.ObjectId
  user                  User           @relation("Worker", fields: [userId], references: [id])
  status                AcceptedTaskStatus     @default(Active)
  proof                 String[]
  describe              String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([taskId])
  @@index([userId])
  @@index([status])
}

model AdminUPI {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  upiId         String    @unique
  name          String
  isActive      Boolean   @default(true)
  totalReceived Float     @default(0)
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([isActive])
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  amount        Float
  type          String    // "Add" or "Withdraw"
  status        String    // "Pending", "Completed", "Rejected"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  paymentMethodId String? @db.ObjectId
  paymentMethod UserPaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  adminUpiId    String?   @db.ObjectId
  adminUpi      AdminUPI? @relation(fields: [adminUpiId], references: [id])
  upiRefNumber  String?
  proofImages   ProofImage[]
  withdrawal    Withdrawal?
  superAdminId   String?   @db.ObjectId
  superAdmin     SuperAdmin? @relation("Profit", fields: [superAdminId], references: [id])

  @@index([userId])
  @@index([paymentMethodId])
  @@index([adminUpiId])
  @@index([superAdminId])
}

model ProofImage {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String     @db.ObjectId
  imageUrl      String
  fileName      String
  createdAt     DateTime   @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String
  senderId   String
  heading    String
  message    String
  read       Boolean  @default(false)
  timestamp  DateTime @default(now())
  expiresAt  DateTime?
}

model UserPaymentMethod {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  methodType    String    // "UPI", "Bank", etc.
  upiId         String?
  isDefault     Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  withdrawals   Withdrawal[]

  @@index([userId])
}

model Withdrawal {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  amount          Float
  status          WithdrawalStatus @default(Pending)
  paymentMethodId String           @db.ObjectId
  paymentMethod   UserPaymentMethod @relation(fields: [paymentMethodId], references: [id])
  transactionId   String?          @unique @db.ObjectId
  transaction     Transaction?     @relation(fields: [transactionId], references: [id])
  notes           String?
  adminNotes      String?
  processedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentMethodId])
}

model SuperAdmin {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  cutProfitPercent  Float          @default(10)
  profitCutedTask   Transaction[]  @relation("Profit")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}


